name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -ldflags "-s -w" -o gosmtp-dup-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} .

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: gosmtp-dup-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}

  build-and-push-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah

      - name: Log in to Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | buildah login --username ${{ github.actor }} --password-stdin ${{ env.REGISTRY }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "latest=latest" >> $GITHUB_OUTPUT

      - name: Build and push with Buildah
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          # Convert to lowercase for Docker registry compatibility
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          VERSION="${{ steps.version.outputs.version }}"

          # Build the image
          buildah build-using-dockerfile \
            --tag "${IMAGE_NAME}:${VERSION}" \
            --tag "${IMAGE_NAME}:latest" \
            .

          # Push both tags
          buildah push "${IMAGE_NAME}:${VERSION}"
          buildah push "${IMAGE_NAME}:latest"

          # Output registry links
          echo "üê≥ Docker image pushed successfully!"
          echo "üì¶ Registry: https://github.com/CaboneMailServer/GoSMTP-dup/pkgs/container/gosmtp-dup"
          echo "üè∑Ô∏è Pull command: docker pull ${IMAGE_NAME}:${VERSION}"
          echo "üè∑Ô∏è Latest: docker pull ${IMAGE_NAME}:latest"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-and-push-docker]
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            gosmtp-dup-*
            config-example.yaml
          body: |
            ## SMTP Duplicator ${{ steps.version.outputs.version }}

            SMTP relay server that duplicates incoming emails to multiple destinations for smooth mail server migration.

            ### üì¶ Binaries
            - **Linux AMD64**: `gosmtp-dup-linux-amd64`
            - **Linux ARM64**: `gosmtp-dup-linux-arm64`
            - **Windows AMD64**: `gosmtp-dup-windows-amd64.exe`
            - **macOS AMD64**: `gosmtp-dup-darwin-amd64`
            - **macOS ARM64**: `gosmtp-dup-darwin-arm64`

            ### üê≥ Docker Images
            - **Registry**: [ghcr.io/cabonemailserver/gosmtp-dup](https://github.com/CaboneMailServer/GoSMTP-dup/pkgs/container/gosmtp-dup)
            - **Version**: `ghcr.io/cabonemailserver/gosmtp-dup:${{ steps.version.outputs.version }}`
            - **Latest**: `ghcr.io/cabonemailserver/gosmtp-dup:latest`

            ### üöÄ Quick Start
            ```bash
            # Using Docker
            docker pull ghcr.io/cabonemailserver/gosmtp-dup:${{ steps.version.outputs.version }}

            # Using binary (Linux)
            wget https://github.com/CaboneMailServer/GoSMTP-dup/releases/download/${{ steps.version.outputs.version }}/gosmtp-dup-linux-amd64
            chmod +x gosmtp-dup-linux-amd64
            ```

            ### üìã Configuration
            See the included `config-example.yaml` for configuration options.
          generate_release_notes: true
          draft: false
          prerelease: false